<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Product Management</title>
    <link rel="stylesheet" href="/css/bootstrap.min.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.4.1/font/bootstrap-icons.css">
    <link rel="stylesheet" href="/css/dataTables.bootstrap5.min.css">
    <link rel="stylesheet" href="/css/dashboard.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css">
    <!-- cropper js -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.css">
    <style>
       
        .toast-success {
            background-color: #28a745; /* Green background for success */
            color: white;
        }
        .toast-error {
            background-color: #dc3545; /* Red background for error */
            color: white;
        }
        .invalid-feedback {
            display: none;
            color: red;
        }
    </style>
</head>
<body>
   

<main class="mt-5 pt-3">
    <div class="container-fluid content">    
        <div class="row">
            <div class="col-md-12">
                <h2><%= product ? 'Edit Product' : 'Add Product' %></h2>
                <form id="productForm" action="<%= product ? '/admin/product/edit/' + product._id : '/admin/product/add' %>" method="POST" enctype="multipart/form-data" novalidate>
                    <div class="mb-3">
                        <label for="productName" class="form-label">Product Name</label>
                        <input type="text" class="form-control" id="productName" name="productName" value="<%= product ? product.productName : '' %>" required>
                        <div class="invalid-feedback">Product name is required and must not start with _ or space.</div>
                    </div>
                    <div class="mb-3">
                        <label for="description" class="form-label">Description</label>
                        <textarea class="form-control" id="description" name="description" required><%= product ? product.description : '' %></textarea>
                        <div class="invalid-feedback">Description is required and must not start with _ or space.</div>
                    </div>
                    <div class="mb-3">
                        <label for="category" class="form-label">Category</label>
                        <select class="form-control" id="category" name="category" required>
                            <% categories.forEach(category => { %>
                                <option value="<%= category._id %>" <%= product && product.category.equals(category._id) ? 'selected' : '' %>><%= category.name %></option>
                            <% }) %>
                        </select>
                        <div class="invalid-feedback">Category is required.</div>
                    </div>
                    <div class="mb-3">
                        <label for="regularPrice" class="form-label">Regular Price</label>
                        <input type="number" class="form-control" id="regularPrice" name="regularPrice" value="<%= product ? product.regularPrice : '' %>" min="0" required>
                        <div class="invalid-feedback">Regular price must be a positive number.</div>
                    </div>
                    <div class="mb-3">
                        <label for="salePrice" class="form-label">Sale Price</label>
                        <input type="number" class="form-control" id="salePrice" name="salePrice" value="<%= product ? product.salePrice : '' %>" min="0" required>
                        <div class="invalid-feedback">Sale price must be a positive number.</div>
                    </div>
                    <div class="mb-3">
                        <label for="productOffer" class="form-label">Product Offer (%)</label>
                        <input type="number" class="form-control" id="productOffer" name="productOffer" value="<%= product ? product.productOffer : '' %>" min="0" max="100" required>
                        <div class="invalid-feedback">Product offer must be between 0 and 100.</div>
                    </div>
                    <div class="mb-3">
                        <label for="quantity" class="form-label">Quantity</label>
                        <input type="number" class="form-control" id="quantity" name="quantity" value="<%= product ? product.quantity : '' %>" min="1" required>
                        <div class="invalid-feedback">Quantity must be at least 1.</div>
                    </div>
                    <!-- <div class="form-group">
                      <label for="productImage">Product Images</label>
                      <input type="file" class="form-control" id="productImage" name="productImage" accept="image/*" multiple>
                      <div class="invalid-feedback">Product images are required.</div>
                      <div id="new-image-container"></div>
                  </div> -->
                  <!-- <div class="form-group">
                    <label for="productImage">Product Images</label>
                    <input type="file" class="form-control" id="productImage" name="productImage" accept="image/*" multiple>
                    <div class="invalid-feedback">Product images are required.</div>
                    <div id="crop-container" style="display: none;">
                        <img id="image-to-crop" src="" alt="Image to crop" style="max-width: 100%;">
                        <div>
                            <button type="button" id="cropImageBtn" class="btn btn-primary">Crop Image</button>
                        </div>
                    </div>
                    <div id="new-image-container"></div>
                </div> -->
                
                  <% if (product && product.productImage && product.productImage.length > 0) { %>
                      <input type="hidden" id="removedImages" name="removedImages" value="">
                      <div id="image-container">
                          <% product.productImage.forEach((image, index) => { %>
                              <div class="img-thumbnail-wrapper" id="image-<%= index %>">
                                  <img src="<%= image %>" alt="Product Image" class="img-thumbnail" style="width: 150px; height: auto;">
                                  <button type="button" class="btn btn-danger btn-sm remove-image" data-index="<%= index %>">Remove</button>
                              </div>
                          <% }) %>
                      </div>
                  <% } %>
                  <!-- <div class="form-group">
                    <label for="productImage">Product Images</label>
                    <input type="file" class="form-control" id="productImage" name="productImage" accept="image/*" multiple>
                    <div class="invalid-feedback">Product images are required.</div>
                    <div id="crop-container" style="display: none;">
                        <img id="image-to-crop" src="" alt="Image to crop" style="max-width: 100%;">
                        <div>
                            <button type="button" id="cropImageBtn" class="btn btn-primary">Crop Image</button>
                        </div>
                    </div>
                    <div id="new-image-container"></div>
                </div> -->
                <div class="form-group">
                    <label for="productImage">Product Images</label>
                    <input type="file" class="form-control" id="productImage" name="productImage" accept="image/*" multiple>
                    <div id="crop-container" style="display: none;">
                        <img id="image-to-crop" src="" alt="Image to crop" style="max-width: 100%;">
                        <div>
                            <button type="button" id="cropImageBtn" class="btn btn-primary">Crop Image</button>
                        </div>
                    </div>
                    <div id="new-image-container"></div>
                </div>
                
                    <button type="submit" class="btn btn-primary"><%= product ? 'Update Product' : 'Add Product' %></button>
                </form>
                <div class="toast-container position-fixed p-3 bottom-0" style="top: 400px; right: 0; z-index: 1055;">
                    <div id="liveToast" class="toast" role="alert" aria-live="assertive" aria-atomic="true" data-bs-delay="3000">
                        <div class="toast-body" id="toast-body"></div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</main>
<script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>
<script src="/js/bootstrap.bundle.min.js"></script>
<script src="/js/jquery-1.12.1.min.js"></script>
<script src="/js/popper.min.js"></script>
<script src="/js/bootstrap.min.js"></script>
<script src="/js/dataTables.bootstrap5.min.js"></script>
<script src="/js/dashboard.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<script>
    document.getElementById('productForm').addEventListener('submit', function(event) {
        let isValid = true;
        const productName = document.getElementById('productName');
        const description = document.getElementById('description');
        const regularPrice = document.getElementById('regularPrice');
        const salePrice = document.getElementById('salePrice');
        const productOffer = document.getElementById('productOffer');
        const quantity = document.getElementById('quantity');
        
        // Clear previous error messages
        document.querySelectorAll('.invalid-feedback').forEach(el => el.style.display = 'none');

        // Validate product name and description
        if (productName.value.startsWith('_') || productName.value.startsWith(' ') || productName.value.trim() === '') {
            productName.nextElementSibling.style.display = 'block';
            isValid = false;
        }
        if (description.value.startsWith('_') || description.value.startsWith(' ') || description.value.trim() === '') {
            description.nextElementSibling.style.display = 'block';
            isValid = false;
        }

        // Validate prices
        if (regularPrice.value < 0) {
            regularPrice.nextElementSibling.style.display = 'block';
            isValid = false;
        }
        if (salePrice.value < 0) {
            salePrice.nextElementSibling.style.display = 'block';
            isValid = false;
        }
        if (productOffer.value < 0 || productOffer.value > 100) {
            productOffer.nextElementSibling.style.display = 'block';
            isValid = false;
        }

        // Validate quantity
        if (quantity.value < 1) {
            quantity.nextElementSibling.style.display = 'block';
            isValid = false;
        }

        if (!isValid) {
            event.preventDefault();
        }
      });
    
      document.addEventListener('DOMContentLoaded', function() {
        document.querySelectorAll('.remove-image').forEach(button => {
            button.addEventListener('click', function(event) {
                event.preventDefault();
                const index = this.dataset.index;
                const removedImagesInput = document.getElementById('removedImages');
                const removedImages = removedImagesInput.value ? removedImagesInput.value.split(',') : [];
                removedImages.push(index);
                removedImagesInput.value = removedImages.join(',');
                document.getElementById('image-' + index).remove();
            });
        });
      });
        let cropper;
const imageInput = document.getElementById('productImage');
const cropContainer = document.getElementById('crop-container');
const imageToCrop = document.getElementById('image-to-crop');
const newImageContainer = document.getElementById('new-image-container');
let croppedImages = []; 

imageInput.addEventListener('change', function(event) {
    const files = event.target.files;
    if (files && files.length > 0) {
        const reader = new FileReader();
        reader.onload = function(e) {
            imageToCrop.src = e.target.result;
            cropContainer.style.display = 'block';

            // Initialize Cropper.js with minimal settings
            if (cropper) {
                cropper.destroy();
            }
            cropper = new Cropper(imageToCrop, {
                aspectRatio: 1,
                viewMode: 1,
            });
        };
        reader.readAsDataURL(files[0]);
    }
});

document.getElementById('cropImageBtn').addEventListener('click', function() {
    const canvas = cropper.getCroppedCanvas({
        width: 300,
        height: 300
    });

    // Convert the canvas to a Blob and store it
    canvas.toBlob(function(blob) {
        const newImage = URL.createObjectURL(blob);
        const div = document.createElement('div');
        div.classList.add('img-thumbnail-wrapper');
        div.innerHTML = `
            <img src="${newImage}" alt="Cropped Image" class="img-thumbnail" style="width: 150px;">
            <button type="button" class="btn btn-danger btn-sm remove-new-image">Remove</button>
        `;
        newImageContainer.appendChild(div);

        // Store the cropped image blob in an array
        croppedImages.push(blob);
         // Add remove button functionality
         div.querySelector('.remove-new-image').addEventListener('click', function() {
            // Remove image from UI
            newImageContainer.removeChild(div);

            // Remove the corresponding image blob from the array
            const index = Array.from(newImageContainer.children).indexOf(div);
            croppedImages.splice(index, 1);
        });
    }, 'image/png');
    
});

// Handle form submission to upload all cropped images at once

//     fetch(this.action, {
//     method: 'POST',
//     body: formData
// })
// .then(response => {
//     if (!response.ok) {
//         throw new Error('Error submitting form');
//     }
//     return response.json();
// })
// .then(data => {
//     console.log('Product and images uploaded:', data);
//     if (data.success) {
//         // Optionally redirect or show success message
//         window.location.href = '/admin/product'; // Adjust as needed
//     }
// })
// .catch(error => {
//     console.error('Error uploading product and images:', error);
// });

// });
document.getElementById('productForm').addEventListener('submit', function(event) {
    event.preventDefault();  // Prevent default form submission

    const formData = new FormData(this);  // Collect the form data

    // Append all cropped images to the form data
    croppedImages.forEach((image, index) => {
        formData.append('productImage', image, `cropped-image-${index}.png`);
    });

    fetch(this.action, {
        method: 'POST',
        body: formData
    })
    .then(response => response.json()) // Parse JSON response
    .then(data => {
        console.log('Product and images uploaded:', data);
        if (data.success) {
            // Optionally redirect or show success message
            alert('Product saved successfully!');
            window.location.href = '/admin/product'; // Redirect to product page
        } else {
            alert('Error: ' + data.error);
        }
    })
    .catch(error => {
        console.error('Error uploading product and images:', error);
    });
});

</script>


</body>
</html>